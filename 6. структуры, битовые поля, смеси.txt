Смешанные типы данных
	Структуры
	Битовые поля
	Смеси


	6.1 Структуры
		Структура — это одна или несколько переменных (возможно, различных типов), которые сгруппированы под одним именем. Структуры помогают в организации сложных данных, поскольку позволяют группу переменных трактовать как единое целое.

		пример:
			сведения о студенте, такие как полное имя, адрес, номер группы и т. д. Некоторые из этих характеристик  сами  могут  быть  структурами (имя = фио, адрес, указатель на сведения о товарищах). Т.е. допускается вложенность.

		6.1.1 Основные сведения о структурах

			8.1.1. Описание структурных переменных

				Необходимо четко различать понятия структуры и структурной переменной. Структура определяет составные части структурной переменной другими словами определяет новый составной тип данных. Описания структурных переменных синтаксически аналогичны ранее изученным описаниям Си: <тип> <список_переменных>;

				описание:
					struct <имя шаблона> { <описание полей структуры> };
					struct <имя шаблона> { <описание полей структуры> } <список переменных>;
					struct               { <описание полей структуры> } <список переменных>;
					struct <имя шаблона>								<список переменных>;

					где
						struct – ключевое слово, объявляющее структуру;
						<имя шаблона> – имя структурного типа, фактически это имя нового типа;
						<описание полей структуры> - переменные.

			8.1.2. Операции над структурами

				1) выбор элемента через имя (селектор)
					. (точка)
				Для получения доступа к элементу структурной переменной через ее имя используется символ точка, обозначающий операцию выбор поля структуры. Для массива структур перед выделением элемента структуры необходимо указать номер элемента массива, для которого выделяется элемент структуры.

					пример:
					struct Student {char *name; int group;} vasia, std[30];
					vasia.name = "Василий";
					for (..)
						print (std[i].name);
					if (std[i].group > std[i+1].group)
						..

				2) присваивание
					= (равно)
				Присваивание заключается в копировании значений всех элементов (в том числе и массивов) правой структурной переменной в соответствующие элементы левой структурной переменной, то есть мы обращаемся к структурной переменной как к единой совокупности значений.

					пример:
					    struct Position {unsigned int x, y;};	//описание структуры
						struct Position a, b;					//создание переменных
						struct Circle {struct Position x; int radius;} c;
						a = b;			//присваивание
						//c = a;		//ошибка, несовпадение типов структур
						c.x = a;

				при копировании компилятор не разбирается из чего состоит структура. он предполагает, что все поля структуры находятся рядом, и копирует сразу весь блок памяти. примерно так:
				dest = source; //копировать в &dest начиная с &source sizeof(struct) байт


				4) взятие адреса
					&
				К структурным переменным, точно так же, как и к обычным переменным, применима операция взятия адреса, обозначаемая знаком &.

					пример:
						struct Position a, *p;
						p = &a;			//указатель на структурную переменную
						(*p).y ++;		//a.y ++;


				3) выбор элемента через указатель (селектор)
					-> (минус и знак больше)
					Если P есть указатель на структурный тип и P содержит адрес переменной S такого же структурного типа, тогда обращение P-><элемент_структуры> относится к конкретному элементу структурной переменной S

					пример:
						p->x = 12;		//a.x = 12;

					как это работает? в указателе содержится базовый адрес всей структуры. а зная, что это за структура можно вычислить смещение внутри этой структуры для доступа к нужному полю.

		6.2. Структуры и функции




		6.3. Массивы структур
		6.4. Указатели на структуры
		6.5. Структуры со ссылками на себя
		6.7. Средство typedef


	6.8. Объединения
	6.9. Битовые поля
